  const [compareData, setCompareData] = useState(null);

  const getCompareIndicators = (compareId: string, type: 'team' | 'user') => {
    if (!selectedFunnel) return [];
    let compareIndicators = indicators.filter(i => i.funnel_id === selectedFunnel.id);
    if (type === 'team') {
      const teamMembers = crmUsers.filter(u => u.team_id === compareId).map(u => u.id);
      compareIndicators = compareIndicators.filter(i => teamMembers.includes(i.user_id));
    } else if (type === 'user') {
      compareIndicators = compareIndicators.filter(i => i.user_id === compareId);
    }
    if (filters?.period === 'custom') {
      if (filters.start) compareIndicators = compareIndicators.filter(i => i.period_start >= filters.start);
      if (filters.end) compareIndicators = compareIndicators.filter(i => i.period_end <= filters.end);
      if (filters.month) compareIndicators = compareIndicators.filter(i => String(i.month_reference) === String(filters.month));
      if (filters.year) compareIndicators = compareIndicators.filter(i => String(i.year_reference) === String(filters.year));
    }
    return compareIndicators;
  };

  const calculateDiff = (main, compare) => {
    if (!main || !compare) return 0;
    if (compare === 0) return 0;
    return (((main - compare) / compare) * 100).toFixed(1);
  };

  const getFunnelComparisonData = () => {
    if (!selectedFunnel || !filters) return { stages: [], comparativo: [], compareStages: [] };
    
    const orderedStages = selectedFunnel.stages?.sort((a, b) => a.stage_order - b.stage_order) || [];
    
    let filteredIndicators = indicators.filter(i => i.funnel_id === selectedFunnel.id);
    
    // Apply same filtering logic as getFunnelChartData
    if (filters.userId) {
      if (Array.isArray(filters.userId)) {
        if (filters.userId.includes('all')) {
          console.log('[CrmPerformance] Including all users');
          // Não filtra por usuário se "all" estiver selecionado
        } else {
          console.log('[CrmPerformance] Filtering by multiple userIds:', filters.userId);
          filteredIndicators = filteredIndicators.filter(indicator => 
            filters.userId.includes(indicator.user_id)
          );
        }
      } else if (filters.userId !== 'all') {
        console.log('[CrmPerformance] Filtering by specific userId:', filters.userId);
        filteredIndicators = filteredIndicators.filter(i => i.user_id === filters.userId);
      }
    } else if (filters.teamId) {
      if (Array.isArray(filters.teamId)) {
        if (filters.teamId.includes('all')) {
          console.log('[CrmPerformance] Including all teams');
          // Não filtra por equipe se "all" estiver selecionado
        } else {
          console.log('[CrmPerformance] Filtering by multiple teamIds:', filters.teamId);
          const teamMembers = crmUsers.filter(u => filters.teamId.includes(u.team_id)).map(u => u.id);
          console.log('[CrmPerformance] Team members:', teamMembers);
          filteredIndicators = filteredIndicators.filter(indicator => teamMembers.includes(indicator.user_id));
        }
      } else if (filters.teamId !== 'all') {
        console.log('[CrmPerformance] Filtering by team:', filters.teamId);
        const teamMembers = crmUsers.filter(u => u.team_id === filters.teamId).map(u => u.id);
        console.log('[CrmPerformance] Team members:', teamMembers);
        filteredIndicators = filteredIndicators.filter(i => teamMembers.includes(i.user_id));
      }
    } else if (crmUser?.role === 'leader') {
      const leaderTeams = teams.filter(t => t.leader_id === crmUser.id).map(t => t.id);
      const teamMembers = crmUsers.filter(u => leaderTeams.includes(u.team_id)).map(u => u.id);
      filteredIndicators = filteredIndicators.filter(i => 
        teamMembers.includes(i.user_id) || i.user_id === crmUser.id
      );
    } else if (crmUser?.role === 'user') {
      filteredIndicators = filteredIndicators.filter(i => i.user_id === crmUser.id);
    }
    
    if (filters.period === 'custom') {
      if (filters.start) filteredIndicators = filteredIndicators.filter(i => i.period_start && i.period_start >= filters.start);
      if (filters.end) filteredIndicators = filteredIndicators.filter(i => i.period_end && i.period_end <= filters.end);
      if (filters.month) filteredIndicators = filteredIndicators.filter(i => String(i.month_reference) === String(filters.month));
      if (filters.year) filteredIndicators = filteredIndicators.filter(i => String(i.year_reference) === String(filters.year));
    }
    
    let compareIndicators = [];
    let compareType: 'team' | 'user' | null = null;
    if (filters.compareId) {
      if (filters.teamId && filters.teamId !== 'all') {
        compareType = 'team';
        compareIndicators = getCompareIndicators(filters.compareId, 'team');
      } else if (filters.userId && filters.userId !== 'all') {
        compareType = 'user';
        compareIndicators = getCompareIndicators(filters.compareId, 'user');
      }
    }
    
    const groupByMonthYear = {};
    filteredIndicators.forEach(ind => {
      const key = `${ind.year_reference}-${ind.month_reference}`;
      if (!groupByMonthYear[key]) groupByMonthYear[key] = [];
      groupByMonthYear[key].push(ind);
    });
    const months = Object.keys(groupByMonthYear).sort().reverse();
    const latestMonth = months[0];
    const periodIndicators = groupByMonthYear[latestMonth] || [];
    
    let comparePeriodIndicators = [];
    if (compareIndicators.length > 0) {
      const groupCompare = {};
      compareIndicators.forEach(ind => {
        const key = `${ind.year_reference}-${ind.month_reference}`;
        if (!groupCompare[key]) groupCompare[key] = [];
        groupCompare[key].push(ind);
      });
      comparePeriodIndicators = groupCompare[latestMonth] || [];
    }
    
    const monthly = aggregateFunnelIndicators(periodIndicators, orderedStages, 'month', true);
    const compareMonthly = aggregateFunnelIndicators(comparePeriodIndicators, orderedStages, 'month', true);
    
    const stages = orderedStages.map((stage, idx) => ({
      name: stage.name,
      value: monthly[idx]?.value || 0,
      compareValue: compareMonthly[idx]?.value || 0,
      diff: calculateDiff(monthly[idx]?.value || 0, compareMonthly[idx]?.value || 0),
    }));
    
    const lastStage = stages[stages.length - 1];
    const firstStage = stages[0];
    const recommendations = periodIndicators.filter(i => i.recommendations_count).reduce((sum, i) => sum + (i.recommendations_count || 0), 0);
    const vendas = periodIndicators.filter(i => i.sales_value).reduce((sum, i) => sum + (i.sales_value || 0), 0);
    
    const conversaoFunil = firstStage && lastStage && firstStage.value > 0 ? (lastStage.value / firstStage.value) * 100 : 0;
    const ticketMedio = lastStage && lastStage.value > 0 ? vendas / lastStage.value : 0;
    
    const compareLastStage = stages[stages.length - 1];
    const compareFirstStage = stages[0];
    const compareVendas = comparePeriodIndicators.filter(i => i.sales_value).reduce((sum, i) => sum + (i.sales_value || 0), 0);
    const compareConversaoFunil = compareFirstStage && compareLastStage && compareFirstStage.compareValue > 0 ? (compareLastStage.compareValue / compareFirstStage.compareValue) * 100 : 0;
    const compareTicketMedio = compareLastStage && compareLastStage.compareValue > 0 ? compareVendas / compareLastStage.compareValue : 0;
    
    const diffConversao = calculateDiff(conversaoFunil, compareConversaoFunil);
    const diffTicket = calculateDiff(ticketMedio, compareTicketMedio);
    
    const comparativo = [
      { label: 'Conversão', value: conversaoFunil.toFixed(1) + '%', diff: diffConversao },
      { label: 'Vendas', value: vendas.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }), diff: calculateDiff(vendas, compareVendas) },
      { label: 'Ticket Médio', value: ticketMedio.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }), diff: diffTicket },
    ];
    
    return { stages, comparativo, compareStages: compareMonthly };
  };